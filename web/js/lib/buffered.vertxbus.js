// Generated by CoffeeScript 1.3.3
var BufferedEventBus,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BufferedEventBus = (function(_super) {

  __extends(BufferedEventBus, _super);

  function BufferedEventBus(url, options) {
    var onclose, onopen,
      _this = this;
    this.sendBuffer = [];
    this.publishBuffer = [];
    onopen = options != null ? options.onopen : void 0;
    onclose = options != null ? options.onclose : void 0;
    this.connected = false;
    if (options == null) {
      options = {};
    }
    options.onopen = function() {
      var v, _i, _j, _len, _len1, _ref, _ref1, _results;
      _this.connected = true;
      if (typeof onopen === "function") {
        onopen();
      }
      if (_this.sendBuffer) {
        _ref = _this.sendBuffer;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _this.send.apply(_this, v);
        }
      }
      if (_this.publishBuffer) {
        _ref1 = _this.publishBuffer;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          v = _ref1[_j];
          _results.push(_this.send.apply(_this, v));
        }
        return _results;
      }
    };
    options.onclose = function() {
      _this.connected = false;
      return typeof onclose === "function" ? onclose() : void 0;
    };
    BufferedEventBus.__super__.constructor.call(this, url, options);
  }

  BufferedEventBus.prototype.send = function(address, message, replyHandler) {
    if (!this.connected) {
      return this.sendBuffer.push(arguments);
    } else {
      return BufferedEventBus.__super__.send.apply(this, arguments);
    }
  };

  BufferedEventBus.prototype.publish = function(address, message, replyHandler) {
    if (!this.connected) {
      return this.publishBuffer.push(arguments);
    } else {
      return BufferedEventBus.__super__.publish.apply(this, arguments);
    }
  };

  return BufferedEventBus;

})(vertx.EventBus);
