// Generated by CoffeeScript 1.3.3
var vertx;

vertx = vertx || {};

vertx.EventBus = (function() {
  var CLOSED, CLOSING, CONNECTING, OPEN;

  CONNECTING = 0;

  OPEN = 1;

  CLOSING = 2;

  CLOSED = 3;

  function EventBus(url, options) {
    this.url = url;
    this.options = options;
    this.sockJSConn = null;
    this.handlerMap = {};
    this.replyHandlers = {};
    this.state = vertx.EventBus.CONNECTING;
    this.onopen = (options ? options.onopen : null);
    this.onclose = (options ? options.onclose : null);
  }

  EventBus.prototype.sendOrPub = function(sendOrPub, address, message, replyHandler) {
    var envelope, json, replyAddress, str;
    this.checkSpecified("address", "string", address);
    this.checkSpecified("message", "object", message);
    this.checkSpecified("replyHandler", "function", replyHandler, true);
    this.checkOpen();
    envelope = {
      type: sendOrPub,
      address: address,
      body: message
    };
    if (replyHandler) {
      replyAddress = this.makeUUID();
      envelope.replyAddress = replyAddress;
      this.replyHandlers[replyAddress] = replyHandler;
    }
    json = angular.toJson || JSON.stringify;
    str = json(envelope);
    return this.sockJSConn.send(str);
  };

  EventBus.prototype.checkOpen = function() {
    if (this.state !== vertx.EventBus.OPEN) {
      throw new Error("INVALID_STATE_ERR");
    }
  };

  EventBus.prototype.checkSpecified = function() {
    return function(paramName, paramType, param, optional) {
      if (!optional && !param) {
        throw new Error("Parameter " + paramName + " must be specified");
      }
      if (param && typeof param !== paramType) {
        throw new Error("Parameter " + paramName + " must be of type " + paramType);
      }
    };
  };

  EventBus.prototype.isFunction = function(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
  };

  EventBus.prototype.makeUUID = function() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(a, b) {
      b = Math.random() * 16;
      return (a === "y" ? b & 3 | 8 : b | 0).toString(16);
    });
  };

  EventBus.prototype.open = function() {
    var _this = this;
    this.sockJSConn = new SockJS(this.url, this.options);
    this.sockJSConn.onopen = function() {
      _this.state = vertx.EventBus.OPEN;
      if (_this.onopen) {
        return _this.onopen();
      }
    };
    this.sockJSConn.onclose = function() {
      _this.state = vertx.EventBus.CLOSED;
      if (_this.onclose) {
        return _this.onclose();
      }
    };
    return this.sockJSConn.onmessage = function(e) {
      var address, body, copy, handler, handlers, i, json, msg, replyAddress, replyHandler, _results;
      msg = e.data;
      json = JSON.parse(msg);
      body = json.body;
      replyAddress = json.replyAddress;
      address = json.address;
      replyHandler = void 0;
      if (replyAddress) {
        replyHandler = function(reply, replyHandler) {
          return send(replyAddress, reply, replyHandler);
        };
      }
      handlers = _this.handlerMap[address];
      if (handlers) {
        copy = handlers.slice(0);
        i = 0;
        _results = [];
        while (i < copy.length) {
          copy[i](body, replyHandler);
          _results.push(i++);
        }
        return _results;
      } else {
        handler = _this.replyHandlers[address];
        if (handler) {
          delete _this.replyHandlers[address];
          return handler(body, replyHandler);
        }
      }
    };
  };

  EventBus.prototype.send = function(address, message, replyHandler) {
    return this.sendOrPub("send", address, message, replyHandler);
  };

  EventBus.prototype.publish = function(address, message, replyHandler) {
    return this.sendOrPub("publish", address, message, replyHandler);
  };

  EventBus.prototype.registerHandler = function(address, handler) {
    var handlers, msg;
    this.checkSpecified("address", "string", address);
    this.checkSpecified("handler", "function", handler);
    this.checkOpen();
    handlers = this.handlerMap[address];
    if (!handlers) {
      handlers = [handler];
      this.handlerMap[address] = handlers;
      msg = {
        type: "register",
        address: address
      };
      return this.sockJSConn.send(JSON.stringify(msg));
    } else {
      return handlers[handlers.length] = handler;
    }
  };

  EventBus.prototype.unregisterHandler = function(address, handler) {
    var handlers, idx, msg;
    this.checkSpecified("address", "string", address);
    this.checkSpecified("handler", "function", handler);
    this.checkOpen();
    handlers = this.handlerMap[address];
    if (handlers) {
      idx = handlers.indexOf(handler);
      if (idx !== -1) {
        handlers.splice(idx, 1);
      }
      if (handlers.length === 0) {
        msg = {
          type: "unregister",
          address: address
        };
        this.sockJSConn.send(JSON.stringify(msg));
        return delete this.handlerMap[address];
      }
    }
  };

  EventBus.prototype.close = function() {
    this.checkOpen();
    this.state = vertx.EventBus.CLOSING;
    this.sockJSConn.close();
    return this.sockJSConn = null;
  };

  EventBus.prototype.readyState = function() {
    return this.state;
  };

  return EventBus;

})();
